// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                        String        @id @default(uuid())
    createdAt                 DateTime      @default(now())
    updatedAt                 DateTime      @updatedAt
    username                  String        @unique
    email                     String        @unique
    emailVerified             Boolean       @default(false)
    passwordHash              String? // nullable for OAuth-only users
    phone                     String?
    photoUrl                  String?
    firstName                 String?
    lastName                  String?
    bio                       String?
    avatar                    String?
    memberships               Membership[]
    accounts                  AuthAccount[]
    messages                  Message[]
    Event                     Event[]
    RSVP                      RSVP[]
    resetPasswordToken        String? // for password reset
    resetPasswordTokenExpires DateTime? // for password reset expiry
}

model AuthAccount {
    id             String @id @default(uuid())
    provider       String // 'google', 'github', 'password'
    providerUserId String // e.g., Google/GitHub user id, or email for password
    user           User   @relation(fields: [userId], references: [id])
    userId         String

    @@unique([provider, providerUserId])
}

model Club {
    id          String       @id @default(uuid())
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    name        String
    description String?
    memberships Membership[]
    events      Event[]
    messages    Message[]
}

model Membership {
    id       String   @id @default(uuid())
    user     User     @relation(fields: [userId], references: [id])
    userId   String
    club     Club     @relation(fields: [clubId], references: [id])
    clubId   String
    isAdmin  Boolean  @default(false)
    memberId Int // unique within club
    joinedAt DateTime @default(now())

    @@unique([clubId, memberId])
    @@unique([userId, clubId])
}

model Event {
    id          String   @id @default(uuid())
    club        Club     @relation(fields: [clubId], references: [id])
    clubId      String
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    date        DateTime
    description String
    rsvps       RSVP[]
}

model RSVP {
    id        String     @id @default(uuid())
    event     Event      @relation(fields: [eventId], references: [id])
    eventId   String
    user      User       @relation(fields: [userId], references: [id])
    userId    String
    status    RSVPStatus
    note      String?
    createdAt DateTime   @default(now())

    @@unique([eventId, userId])
}

enum RSVPStatus {
    AVAILABLE
    NOT_AVAILABLE
    MAYBE
    ONLY_IF_NEEDED
}

model Message {
    id        String   @id @default(uuid())
    club      Club     @relation(fields: [clubId], references: [id])
    clubId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    content   String
    createdAt DateTime @default(now())
}
