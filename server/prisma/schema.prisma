// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String        @id @default(uuid())
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")
  username                  String        @unique
  email                     String        @unique
  emailVerified             Boolean       @default(false) @map("email_verified")
  passwordHash              String?       @map("password_hash") // nullable for OAuth-only users
  phone                     String?
  photoUrl                  String?       @map("photo_url")
  firstName                 String?       @map("first_name")
  lastName                  String?       @map("last_name")
  bio                       String?
  avatar                    String?
  memberships               Membership[]
  blockedUsers              BlockedUser[]
  blockedByUsers            BlockedUser[] @relation("BlockedBy")
  accounts                  AuthAccount[]
  messages                  Message[]
  Event                     Event[]
  RSVP                      RSVP[]
  resetPasswordToken        String?       @map("reset_password_token") // for password reset
  resetPasswordTokenExpires DateTime?     @map("reset_password_token_expires") // for password reset expiry

  @@map("users")
}

model AuthAccount {
  id             String @id @default(uuid())
  provider       String // 'google', 'github', 'password'
  providerUserId String @map("provider_user_id") // e.g., Google/GitHub user id, or email for password
  user           User   @relation(fields: [userId], references: [id])
  userId         String @map("user_id")

  @@unique([provider, providerUserId])
  @@map("auth_accounts")
}

model Group {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  name         String
  description  String?
  isPublic     Boolean       @default(false) @map("is_public")
  memberships  Membership[]
  blockedUsers BlockedUser[]
  events       Event[]
  messages     Message[]

  @@map("groups")
}

model Membership {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @map("user_id")
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  String   @map("group_id")
  isAdmin  Boolean  @default(false) @map("is_admin")
  memberId Int      @map("member_id") // unique within group
  joinedAt DateTime @default(now()) @map("joined_at")

  @@unique([groupId, memberId])
  @@unique([userId, groupId])
  @@map("memberships")
}

model BlockedUser {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String   @map("group_id")
  blockedBy   User     @relation("BlockedBy", fields: [blockedById], references: [id])
  blockedById String   @map("blocked_by_id")
  blockedAt   DateTime @default(now()) @map("blocked_at")
  reason      String?

  @@unique([userId, groupId])
  @@map("blocked_users")
}

model Event {
  id          String   @id @default(uuid())
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String   @map("group_id")
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by_id")
  date        DateTime
  description String
  rsvps       RSVP[]

  @@map("events")
}

model RSVP {
  id        String     @id @default(uuid())
  event     Event      @relation(fields: [eventId], references: [id])
  eventId   String     @map("event_id")
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @map("user_id")
  status    RSVPStatus
  note      String?
  createdAt DateTime   @default(now()) @map("created_at")

  @@unique([eventId, userId])
  @@map("rsvps")
}

enum RSVPStatus {
  AVAILABLE
  NOT_AVAILABLE
  MAYBE
  ONLY_IF_NEEDED
}

model Message {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String   @map("group_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("messages")
}
