// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
  title    = "Clubs Database ERD"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                             @id @default(uuid())
  createdAt                  DateTime                           @default(now()) @map("created_at")
  updatedAt                  DateTime                           @updatedAt @map("updated_at")
  username                   String                             @unique
  email                      String                             @unique
  emailVerified              Boolean                            @default(false) @map("email_verified")
  passwordHash               String?                            @map("password_hash") // nullable for OAuth-only users
  phone                      String?                            @map("phone")
  photoUrl                   String?                            @map("photo_url")
  firstName                  String?                            @map("first_name")
  lastName                   String?                            @map("last_name")
  bio                        String?                            @map("bio")
  avatar                     String?                            @map("avatar")
  memberships                Membership[]
  blockedUsers               BlockedUser[]
  blockedByUsers             BlockedUser[]                      @relation("BlockedBy")
  accounts                   AuthAccount[]
  messages                   Message[]
  Event                      Event[]
  RSVP                       RSVP[]
  resetPasswordToken         String?                            @map("reset_password_token") // for password reset
  resetPasswordTokenExpires  DateTime?                          @map("reset_password_token_expires") // for password reset expiry
  // Tennis relations
  teamCaptain                TeamLeagueTeam[]                   @relation("TeamCaptain")
  singlesMatchesPlayer1      TeamLeagueIndividualSinglesMatch[] @relation("SinglesPlayer1")
  singlesMatchesPlayer2      TeamLeagueIndividualSinglesMatch[] @relation("SinglesPlayer2")
  doublesMatchesTeam1Player1 TeamLeagueIndividualDoublesMatch[] @relation("DoublesTeam1Player1")
  doublesMatchesTeam1Player2 TeamLeagueIndividualDoublesMatch[] @relation("DoublesTeam1Player2")
  doublesMatchesTeam2Player1 TeamLeagueIndividualDoublesMatch[] @relation("DoublesTeam2Player1")
  doublesMatchesTeam2Player2 TeamLeagueIndividualDoublesMatch[] @relation("DoublesTeam2Player2")

  @@map("users")
}

model AuthAccount {
  id             String @id @default(uuid())
  provider       String // 'google', 'github', 'password'
  providerUserId String @map("provider_user_id") // e.g., Google/GitHub user id, or email for password
  user           User   @relation(fields: [userId], references: [id])
  userId         String @map("user_id")

  @@unique([provider, providerUserId])
  @@map("auth_accounts")
}

model Group {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  name           String           @map("name")
  description    String?          @map("description")
  isPublic       Boolean          @default(false) @map("is_public")
  memberships    Membership[]
  blockedUsers   BlockedUser[]
  events         Event[]
  messages       Message[]
  TeamLeagueTeam TeamLeagueTeam[]

  @@map("groups")
}

model Membership {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @map("user_id")
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  String   @map("group_id")
  isAdmin  Boolean  @default(false) @map("is_admin")
  memberId Int      @map("member_id") // unique within group
  joinedAt DateTime @default(now()) @map("joined_at")

  @@unique([groupId, memberId])
  @@unique([userId, groupId])
  @@map("memberships")
}

model BlockedUser {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String   @map("group_id")
  blockedBy   User     @relation("BlockedBy", fields: [blockedById], references: [id])
  blockedById String   @map("blocked_by_id")
  blockedAt   DateTime @default(now()) @map("blocked_at")
  reason      String?  @map("reason")

  @@unique([userId, groupId])
  @@map("blocked_users")
}

model Event {
  id          String   @id @default(uuid())
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String   @map("group_id")
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by_id")
  date        DateTime @map("date")
  description String   @map("description")
  rsvps       RSVP[]

  @@map("events")
}

model RSVP {
  id        String     @id @default(uuid())
  event     Event      @relation(fields: [eventId], references: [id])
  eventId   String     @map("event_id")
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @map("user_id")
  status    RSVPStatus @map("status")
  note      String?    @map("note")
  createdAt DateTime   @default(now()) @map("created_at")

  @@unique([eventId, userId])
  @@map("rsvps")
}

enum RSVPStatus {
  AVAILABLE
  NOT_AVAILABLE
  MAYBE
  ONLY_IF_NEEDED
}

model Message {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String   @map("group_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("messages")
}

model TeamLeague {
  id           String                  @id @default(uuid())
  name         String                  @map("name")
  description  String?                 @map("description")
  startDate    DateTime                @map("start_date")
  endDate      DateTime                @map("end_date")
  isActive     Boolean                 @default(true) @map("is_active")
  createdAt    DateTime                @default(now()) @map("created_at")
  updatedAt    DateTime                @updatedAt @map("updated_at")
  pointSystems TeamLeaguePointSystem[]
  teams        TeamLeagueTeam[]
  teamMatches  TeamLeagueTeamMatch[]
  // Removed: individualSinglesMatches TeamLeagueIndividualSinglesMatch[]
  // Removed: individualDoublesMatches TeamLeagueIndividualDoublesMatch[]

  @@map("team_leagues")
}

enum MatchType {
  SINGLES
  DOUBLES
}

model TeamLeaguePointSystem {
  id                String     @id @default(uuid())
  teamLeague        TeamLeague @relation(fields: [teamLeagueId], references: [id])
  teamLeagueId      String     @map("team_league_id")
  matchType         MatchType  @map("match_type")
  order             Int        @map("order")
  winPoints         Int        @default(3) @map("win_points")
  lossPoints        Int        @default(0) @map("loss_points")
  drawPoints        Int        @default(0) @map("draw_points")
  defaultWinPoints  Int        @default(3) @map("default_win_points")
  defaultLossPoints Int        @default(0) @map("default_loss_points")
  defaultDrawPoints Int        @default(1) @map("default_draw_points")

  @@unique([teamLeagueId, matchType, order])
  @@map("team_league_point_systems")
}

model TeamLeagueTeam {
  id           String                @id @default(uuid())
  captainId    String                @map("captain_id")
  captain      User                  @relation("TeamCaptain", fields: [captainId], references: [id])
  teamLeague   TeamLeague            @relation(fields: [teamLeagueId], references: [id])
  teamLeagueId String                @map("team_league_id")
  matchesHome  TeamLeagueTeamMatch[] @relation("HomeTeam")
  matchesAway  TeamLeagueTeamMatch[] @relation("AwayTeam")
  Group        Group                 @relation(fields: [groupId], references: [id])
  groupId      String                @map("group_id")

  @@map("team_league_teams")
}

model TeamLeagueTeamMatch {
  id             String                             @id @default(uuid())
  homeTeamId     String                             @map("home_team_id")
  awayTeamId     String                             @map("away_team_id")
  homeTeam       TeamLeagueTeam                     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam       TeamLeagueTeam                     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  matchDate      DateTime                           @map("match_date")
  createdAt      DateTime                           @default(now()) @map("created_at")
  teamLeague     TeamLeague                         @relation(fields: [teamLeagueId], references: [id])
  teamLeagueId   String                             @map("team_league_id")
  singlesMatches TeamLeagueIndividualSinglesMatch[]
  doublesMatches TeamLeagueIndividualDoublesMatch[]

  @@map("team_league_team_matches")
}

// Winner enum for match result
enum Winner {
  HOME
  AWAY
}

enum ResultType {
  C
  TM
  D
  NONE
}

model TeamLeagueIndividualSinglesMatch {
  id          String              @id @default(uuid())
  player1Id   String              @map("player1_id")
  player2Id   String              @map("player2_id")
  player1     User                @relation("SinglesPlayer1", fields: [player1Id], references: [id])
  player2     User                @relation("SinglesPlayer2", fields: [player2Id], references: [id])
  matchDate   DateTime            @map("match_date")
  createdAt   DateTime            @default(now()) @map("created_at")
  teamMatch   TeamLeagueTeamMatch @relation(fields: [teamMatchId], references: [id])
  teamMatchId String              @map("team_match_id")
  order       Int                 @map("order")
  score       String              @map("score") // Must be a valid Tennis score, validate in backend
  winner      Winner?             @map("winner") // HOME, AWAY, or null for incomplete
  resultType  ResultType?         @default(NONE) @map("result_type")

  @@unique([teamMatchId, order])
  @@map("team_league_individual_singles_matches")
}

model TeamLeagueIndividualDoublesMatch {
  id             String              @id @default(uuid())
  team1Player1Id String              @map("team1_player1_id")
  team1Player2Id String              @map("team1_player2_id")
  team2Player1Id String              @map("team2_player1_id")
  team2Player2Id String              @map("team2_player2_id")
  team1Player1   User                @relation("DoublesTeam1Player1", fields: [team1Player1Id], references: [id])
  team1Player2   User                @relation("DoublesTeam1Player2", fields: [team1Player2Id], references: [id])
  team2Player1   User                @relation("DoublesTeam2Player1", fields: [team2Player1Id], references: [id])
  team2Player2   User                @relation("DoublesTeam2Player2", fields: [team2Player2Id], references: [id])
  matchDate      DateTime            @map("match_date")
  createdAt      DateTime            @default(now()) @map("created_at")
  teamMatch      TeamLeagueTeamMatch @relation(fields: [teamMatchId], references: [id])
  teamMatchId    String              @map("team_match_id")
  order          Int                 @map("order")
  score          String              @map("score") // Must be a valid Tennis score, validate in backend
  winner         Winner?             @map("winner") // HOME, AWAY, or null for incomplete
  resultType     ResultType?         @default(NONE) @map("result_type")

  @@unique([teamMatchId, order])
  @@map("team_league_individual_doubles_matches")
}
